"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 1inch Aggregation protocol API
 *  <h2>Ethereum Network</h2> Using 1inch Aggregation protocol API, you can find the best route to exchange assets and make the exchange. <br><br> Step by step: 1. Lookup addresses of tokens you want to swap, for example ‘0xxx’ , ‘0xxxx’ for DAI -> 1INCH 2. Check for allowance of 1inch router contract to spend source asset (/approve/allowance) 3. If necessary, give approval for 1inch router to spend source token (/approve/transaction) 4. Monitor the best exchange route using (/quote) 5. When you ready use to perform swap (/swap)
 *
 * The version of the OpenAPI document: 4.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class ApproveApi extends runtime.BaseAPI {
    /**
     * Get the number of tokens that the 1inch router is allowed to spend
     */
    approveFactoryControllerGetAllowanceRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
                throw new runtime.RequiredError('tokenAddress', 'Required parameter requestParameters.tokenAddress was null or undefined when calling approveFactoryControllerGetAllowance.');
            }
            if (requestParameters.walletAddress === null || requestParameters.walletAddress === undefined) {
                throw new runtime.RequiredError('walletAddress', 'Required parameter requestParameters.walletAddress was null or undefined when calling approveFactoryControllerGetAllowance.');
            }
            const queryParameters = {};
            if (requestParameters.tokenAddress !== undefined) {
                queryParameters['tokenAddress'] = requestParameters.tokenAddress;
            }
            if (requestParameters.walletAddress !== undefined) {
                queryParameters['walletAddress'] = requestParameters.walletAddress;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v4.0/1/approve/allowance`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Get the number of tokens that the 1inch router is allowed to spend
     */
    approveFactoryControllerGetAllowance(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.approveFactoryControllerGetAllowanceRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Generate data for calling the contract in order to allow the 1inch router to spend funds
     */
    approveFactoryControllerGetCallDataRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenAddress === null || requestParameters.tokenAddress === undefined) {
                throw new runtime.RequiredError('tokenAddress', 'Required parameter requestParameters.tokenAddress was null or undefined when calling approveFactoryControllerGetCallData.');
            }
            const queryParameters = {};
            if (requestParameters.tokenAddress !== undefined) {
                queryParameters['tokenAddress'] = requestParameters.tokenAddress;
            }
            if (requestParameters.amount !== undefined) {
                queryParameters['amount'] = requestParameters.amount;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v4.0/1/approve/transaction`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ApproveCalldataResponseDtoFromJSON(jsonValue));
        });
    }
    /**
     * Generate data for calling the contract in order to allow the 1inch router to spend funds
     */
    approveFactoryControllerGetCallData(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.approveFactoryControllerGetCallDataRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Address of the 1inch router that must be trusted to spend funds for the exchange
     */
    approveFactoryControllerGetSpenderRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v4.0/1/approve/spender`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => models_1.ApproveSpenderResponseDtoFromJSON(jsonValue));
        });
    }
    /**
     * Address of the 1inch router that must be trusted to spend funds for the exchange
     */
    approveFactoryControllerGetSpender(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.approveFactoryControllerGetSpenderRaw(initOverrides);
            return yield response.value();
        });
    }
}
exports.ApproveApi = ApproveApi;
